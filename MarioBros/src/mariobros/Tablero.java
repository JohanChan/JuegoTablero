/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mariobros;

import java.awt.Image;
import java.awt.event.KeyEvent;
import java.net.URL;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import static mariobros.Analisis_Sintactico.personaje;
import static mariobros.Analisis_Sintactico.salida;
import static mariobros.Analisis_Sintactico.listaBloques;
import static mariobros.Analisis_Sintactico.listaComplementos;
import static mariobros.Analisis_Sintactico.listaEnemigos;

/**
 *
 * @author JOHAN
 */
public class Tablero extends javax.swing.JFrame {

    static Boton[][] tablero;

    /**
     * Creates new form Tablero
     */
    public Tablero() {

    }
    static int filas = 0;
    int columnas = 0;
    
    Hilo_Enemigo hEnemigo;

    public Tablero(int filas,int columnas) {
        initComponents();
        this.filas = filas;
        this.columnas =columnas;
    }

    void crearTablero() {
        tablero = new Boton[filas][columnas];
        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < columnas; j++) {
                tablero[i][j] = new Boton((i * jPanel1.getWidth()) / filas, (j * jPanel1.getHeight()) / columnas, (jPanel1.getWidth()) / filas, (jPanel1.getHeight()) / columnas);
            }
        }

    }
    int Px;
    int Py;

    void pintarPersonaje() {
       // Px = personaje.x;
       //Py = personaje.y;
       Px = 7;
       Py=3;
       
//        String imagen = personaje.imagen.replace("'", "\"");
        //URL url = getClass().getResource(imagen);
        ImageIcon imgPersonaje = new ImageIcon("C:\\Users\\JOHAN\\Documents\\NetBeansProjects\\MarioBros\\src\\Imagenes\\mario.png");
        //ImageIcon imgPersonaje = new ImageIcon(url);
        imgPersonaje = new ImageIcon(imgPersonaje.getImage().getScaledInstance(tablero[Px][Py].getWidth(), tablero[Px][Py].getHeight(), Image.SCALE_DEFAULT));
        tablero[Px][Py].setIcon(imgPersonaje);
        lblVida.setText("Vida personaje: " + 100);

    }

    void pintarBloques() {
        for (int i = 0; i < listaBloques.size(); i++) {
            int x = listaBloques.get(i).x;
            int y = listaBloques.get(i).y;
            ImageIcon imgBloque = new ImageIcon("C:\\Users\\JOHAN\\Documents\\NetBeansProjects\\MarioBros\\src\\Imagenes\\muro.png");
            imgBloque = new ImageIcon(imgBloque.getImage().getScaledInstance(tablero[x][y].getWidth(), tablero[x][y].getHeight(), Image.SCALE_DEFAULT));
            tablero[x][y].setIcon(imgBloque);
        }

    }

    void pintarVidas() {
        for (int i = 0; i < listaComplementos.size(); i++) {
            int x = listaComplementos.get(i).posX;
            int y = listaComplementos.get(i).posY;
            ImageIcon imgVida = new ImageIcon("C:\\Users\\JOHAN\\Documents\\NetBeansProjects\\MarioBros\\src\\Imagenes\\vida.png");
            imgVida = new ImageIcon(imgVida.getImage().getScaledInstance(tablero[x][y].getWidth(), tablero[x][y].getHeight(), Image.SCALE_DEFAULT));
            tablero[x][y].setIcon(imgVida);
        }
    }

    void pintarEnemigos() {
        int x = 0;
        int y = 0;
        for (int i = 0; i < listaEnemigos.size(); i++) {
            x = listaEnemigos.get(i).posX;
            y = listaEnemigos.get(i).posY;
            ImageIcon imgEnemigo = new ImageIcon("C:\\Users\\JOHAN\\Documents\\NetBeansProjects\\MarioBros\\src\\Imagenes\\bowser.png");
            imgEnemigo = new ImageIcon(imgEnemigo.getImage().getScaledInstance(tablero[x][y].getWidth(), tablero[x][y].getHeight(), Image.SCALE_DEFAULT));
            tablero[x][y].setIcon(imgEnemigo);
        }
        //hiloEnemigo.start();
    }

    void pintarSalida() {
        int x = 1;
        int y = 6;
        ImageIcon imgPersonaje = new ImageIcon("C:\\Users\\JOHAN\\Documents\\NetBeansProjects\\MarioBros\\src\\Imagenes\\castillo.png");
        imgPersonaje = new ImageIcon(imgPersonaje.getImage().getScaledInstance(tablero[x][y].getWidth(), tablero[x][y].getHeight(), Image.SCALE_DEFAULT));
        tablero[x][y].setIcon(imgPersonaje);
    }

    void pintarTablero() {
        jPanel1.removeAll();
        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < columnas; j++) {
                jPanel1.add(tablero[i][j]);
            }
        }
        jPanel1.repaint();
        jPanel1.updateUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblVida = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPanel1KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 711, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 462, Short.MAX_VALUE)
        );

        lblVida.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblVida, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblVida, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    int index=0;
    Thread hiloEnemigo = new Thread() {
        @Override
        public void run() {
            ImageIcon imgEnemigo = new ImageIcon("C:\\Users\\JOHAN\\Documents\\NetBeansProjects\\MarioBros\\src\\Imagenes\\bowser.png");
            while (personaje.vida != 0) {
                
            }
            
        }
    };

    private boolean verificarEnemigos(int x, int y) {
        for (int i = 0; i < listaEnemigos.size(); i++) {
            if (x == listaEnemigos.get(i).posX && y == listaEnemigos.get(i).posY) {
                return true;
            }
        }
        return false;
    }

    protected int devolverDanio(int x, int y) {
        for (int i = 0; i < listaEnemigos.size(); i++) {
            if (x == listaEnemigos.get(i).posX && y == listaEnemigos.get(i).posY) {
                return listaEnemigos.get(i).danio;
            }
        }
        return 0;

    }

    private void jPanel1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel1KeyPressed
    }//GEN-LAST:event_jPanel1KeyPressed
    protected boolean verificarMuros(int Px, int Py) {
        for (int i = 0; i < listaBloques.size(); i++) {
            int x = listaBloques.get(i).x;
            int y = listaBloques.get(i).y;
            if (Px == x && Py == y) {
                return true;
            }
        }
        return false;
    }

    protected boolean verificarVidas(int Px, int Py) {
        for (int i = 0; i < listaComplementos.size(); i++) {
            int x = listaComplementos.get(i).posX;
            int y = listaComplementos.get(i).posY;
            if (Px == x && Py == y) {
                return true;
            }
        }
        return false;
    }

    private int devolverVida(int x, int y) {
        for (int i = 0; i < listaComplementos.size(); i++) {
            if (x == listaComplementos.get(i).posX && y == listaComplementos.get(i).posY) {
                return listaComplementos.get(i).vida;
            }
        }
        return 0;
    }

    private boolean verificarSalida(int x, int y) {
        int xSalida = salida.posX;
        int ySalida = salida.posY;
        if (x == xSalida && y == ySalida) {
            return true;
        }
        return false;
    }
    private void verificarMatriz(){
        
    }

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        ImageIcon imgPersonaje = new ImageIcon("C:\\Users\\JOHAN\\Documents\\NetBeansProjects\\MarioBros\\src\\Imagenes\\mario.png");
        imgPersonaje = new ImageIcon(imgPersonaje.getImage().getScaledInstance(tablero[Px][Py].getWidth(), tablero[Px][Py].getHeight(), Image.SCALE_DEFAULT));
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_DOWN:
                tablero[Px][Py].setIcon(null);
                Py++;
                if (verificarMuros(Px, Py)) {
                    Py--;
                    tablero[Px][Py].setIcon(imgPersonaje);
                    jPanel1.repaint();
                } else if (verificarSalida(Px, Py)) {
                    tablero[Px][Py].setIcon(imgPersonaje);
                    jPanel1.repaint();
                    JOptionPane.showMessageDialog(null, "Juego Terminado");
                    this.dispose();
                } else if (verificarVidas(Px, Py)) {
                    int vida = devolverVida(Px, Py);
                    personaje.vida += vida;
                    tablero[Px][Py].setIcon(imgPersonaje);
                    jPanel1.repaint();
                    lblVida.setText("Vida personaje: " + personaje.vida);

                } else if (verificarEnemigos(Px, Py)) {
                    int danio = devolverDanio(Px, Py);
                    personaje.vida -= danio;
                    if (personaje.vida <= 0) {
                        JOptionPane.showMessageDialog(null, "GAME OVER");
                        this.dispose();
                    } else {
                        tablero[Px][Py].setIcon(imgPersonaje);
                        jPanel1.repaint();
                        lblVida.setText("Vida personaje: " + personaje.vida);
                    }

                } else {
                    tablero[Px][Py].setIcon(imgPersonaje);
                    jPanel1.repaint();
                }
                break;
            case KeyEvent.VK_UP:

                tablero[Px][Py].setIcon(null);
                Py--;
                if (verificarMuros(Px, Py)) {
                    Py++;
                    tablero[Px][Py].setIcon(imgPersonaje);
                    jPanel1.repaint();
                } else if (verificarVidas(Px, Py)) {
                    int vida = devolverVida(Px, Py);
                    personaje.vida += vida;
                    tablero[Px][Py].setIcon(imgPersonaje);
                    jPanel1.repaint();
                    lblVida.setText("Vida personaje: " + personaje.vida);
                } else if (verificarSalida(Px, Py)) {
                    JOptionPane.showMessageDialog(null, "Juego Terminado");
                    this.dispose();
                } else if (verificarEnemigos(Px, Py)) {
                    int danio = devolverDanio(Px, Py);
                    personaje.vida -= danio;
                    if (personaje.vida <= 0) {
                        JOptionPane.showMessageDialog(null, "GAME OVER");
                        this.dispose();
                    } else {
                        tablero[Px][Py].setIcon(imgPersonaje);
                        jPanel1.repaint();
                        lblVida.setText("Vida personaje: " + personaje.vida);
                    }
                } else {

                    tablero[Px][Py].setIcon(imgPersonaje);
                    jPanel1.repaint();
                }
                break;
            case KeyEvent.VK_LEFT:

                tablero[Px][Py].setIcon(null);
                Px--;
                if (verificarMuros(Px, Py)) {
                    Px++;
                    tablero[Px][Py].setIcon(imgPersonaje);
                    jPanel1.repaint();
                } else if (verificarVidas(Px, Py)) {
                    int vida = devolverVida(Px, Py);
                    personaje.vida += vida;
                    tablero[Px][Py].setIcon(imgPersonaje);
                    jPanel1.repaint();
                    lblVida.setText("Vida personaje: " + personaje.vida);
                } else if (verificarSalida(Px, Py)) {
                    JOptionPane.showMessageDialog(null, "Juego Terminado");
                    this.dispose();
                } else if (verificarEnemigos(Px, Py)) {
                    int danio = devolverDanio(Px, Py);
                    personaje.vida -= danio;
                    if (personaje.vida <= 0) {
                        JOptionPane.showMessageDialog(null, "GAME OVER");
                        this.dispose();
                    } else {
                        tablero[Px][Py].setIcon(imgPersonaje);
                        jPanel1.repaint();
                        lblVida.setText("Vida personaje: " + personaje.vida);
                    }
                } else {
                    tablero[Px][Py].setIcon(imgPersonaje);
                    jPanel1.repaint();
                }
                break;
            case KeyEvent.VK_RIGHT:

                tablero[Px][Py].setIcon(null);
                Px++;
                if (verificarMuros(Px, Py)) {
                    Px--;
                    tablero[Px][Py].setIcon(imgPersonaje);
                    jPanel1.repaint();
                } else if (verificarVidas(Px, Py)) {
                    int vida = devolverVida(Px, Py);
                    personaje.vida += vida;
                    tablero[Px][Py].setIcon(imgPersonaje);
                    jPanel1.repaint();
                    lblVida.setText("Vida personaje: " + personaje.vida);
                } else if (verificarSalida(Px, Py)) {
                    JOptionPane.showMessageDialog(null, "Juego Terminado");
                    this.dispose();
                } else if (verificarVidas(Px, Py)) {
                    int vida = devolverVida(Px, Py);
                    personaje.vida += vida;
                    tablero[Px][Py].setIcon(imgPersonaje);
                    jPanel1.repaint();
                    lblVida.setText("Vida personaje: " + personaje.vida);
                } else if (verificarEnemigos(Px, Py)) {
                    int danio = devolverDanio(Px, Py);
                    personaje.vida -= danio;
                    if (personaje.vida <= 0) {
                        JOptionPane.showMessageDialog(null, "GAME OVER");
                        this.dispose();
                    } else {
                        tablero[Px][Py].setIcon(imgPersonaje);
                        jPanel1.repaint();
                        lblVida.setText("Vida personaje: " + personaje.vida);
                    }
                } else {

                    tablero[Px][Py].setIcon(imgPersonaje);
                    jPanel1.repaint();
                }

                break;
        }
    }//GEN-LAST:event_formKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tablero().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblVida;
    // End of variables declaration//GEN-END:variables
}
